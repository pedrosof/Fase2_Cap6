import cx_Oracle
cx_Oracle.init_oracle_client(lib_dir="/Users/pedrosof/Downloads/instantclient_23_3")
from configparser import ConfigParser

# Função para carregar as configurações
def carregar_configuracoes():
    config = ConfigParser()
    try:
        # Tente ler o arquivo de configuração, ajuste o caminho se necessário
        config.read('config/config_plantio_colheita.txt')  # Caminho relativo ou absoluto, conforme necessário
        return config
    except Exception as e:
        print(f"Erro ao carregar o arquivo de configuração: {e}")
        return None

# Função para conectar ao banco de dados Oracle
def conectar_banco():
    # Carregar configurações do arquivo
    config = carregar_configuracoes()

    if config is None:
        print("Erro: Não foi possível carregar as configurações.")
        return None

    try:
        # Ler as configurações do arquivo de configuração
        host = config['Database']['host']
        port = config['Database']['port']
        service_name = config['Database']['service_name']
        user = config['Database']['user']
        password = config['Database']['password']

        # Criar o Data Source Name (DSN)
        dsn_tns = cx_Oracle.makedsn(host, port, service_name=service_name)

        # Estabelecer conexão
        conn = cx_Oracle.connect(user=user, password=password, dsn=dsn_tns)
        print("Conexão com o banco de dados estabelecida com sucesso!")
        return conn

    except cx_Oracle.DatabaseError as e:
        print(f"Erro ao conectar ao banco de dados: {e}")
        return None

# Função para criar as tabelas
def criar_tabelas(conn):
    cursor = conn.cursor()

    # Tabela COLETA
    cursor.execute("""
        CREATE TABLE COLETA 
        (
            ID_COLETA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE NOT NULL ENABLE,
            ID_CLIMA NUMBER NOT NULL ENABLE, 
            ID_PLANTA NUMBER NOT NULL ENABLE, 
            ID_SOLO NUMBER NOT NULL ENABLE, 
            PRIMARY KEY (ID_COLETA),
            FOREIGN KEY (ID_CLIMA) REFERENCES CONDICOES_CLIMATICAS (ID_CLIMA) ENABLE,
            FOREIGN KEY (ID_PLANTA) REFERENCES PLANTAS (ID_PLANTA) ENABLE,
            FOREIGN KEY (ID_SOLO) REFERENCES SOLO (ID_SOLO) ENABLE
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    # Tabela CONDICOES_CLIMATICAS
    cursor.execute("""
        CREATE TABLE CONDICOES_CLIMATICAS 
        (
            ID_CLIMA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE NOT NULL ENABLE,
            DATA_COLETA DATE NOT NULL ENABLE, 
            TEMPERATURA NUMBER(5,2) NOT NULL ENABLE, 
            CLIMA VARCHAR2(50) NOT NULL ENABLE, 
            UMIDADE NUMBER(5,2) NOT NULL ENABLE, 
            PRIMARY KEY (ID_CLIMA),
            CONSTRAINT UNQ_DATA_COLETA UNIQUE (DATA_COLETA)
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    # Tabela PLANTAS
    cursor.execute("""
        CREATE TABLE PLANTAS 
        (
            ID_PLANTA NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE NOT NULL ENABLE,
            NUMERO_AMOSTRAS NUMBER NOT NULL ENABLE, 
            DATA_AMOSTRA DATE NOT NULL ENABLE, 
            COR_PLANTAS VARCHAR2(20), 
            ALTURA_PLANTAS NUMBER(5,2), 
            BRIX_ALTA NUMBER(5,2), 
            BRIX_MEIO NUMBER(5,2), 
            BRIX_BAIXA NUMBER(5,2), 
            BRIX_MEDIO NUMBER(5,2), 
            PRIMARY KEY (ID_PLANTA),
            FOREIGN KEY (DATA_AMOSTRA) REFERENCES CONDICOES_CLIMATICAS (DATA_COLETA) ENABLE
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    # Tabela SOLO
    cursor.execute("""
        CREATE TABLE SOLO 
        (
            ID_SOLO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE NOT NULL ENABLE,
            NUMERO_AMOSTRAS NUMBER NOT NULL ENABLE, 
            DATA_AMOSTRA DATE NOT NULL ENABLE, 
            NUTRIENTE_N NUMBER(5,2), 
            NUTRIENTE_P NUMBER(5,2), 
            NUTRIENTE_K NUMBER(5,2), 
            UMIDADE_SOLO NUMBER(5,2), 
            PH_SOLO NUMBER(4,2), 
            TEMPERATURA_SOLO NUMBER(5,2), 
            PRIMARY KEY (ID_SOLO)
        ) SEGMENT CREATION IMMEDIATE 
        PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
    """)

    print("Tabelas criadas com sucesso.")

if __name__ == "__main__":
    conn = conectar_banco()
    if conn:
        criar_tabelas(conn)
        conn.close()
